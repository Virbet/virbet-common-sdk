package org.wireforce.virbet.interfaces;

/**
 * Интерфейс, предоставляющий контракт для фабрик, ответственных за создание и предоставление
 * единственного экземпляра объекта указанного типа T. Реализация интерфейса обеспечивает
 * соблюдение паттерна проектирования "Одиночка".
 * <br/>
 * <p>
 * <strong>Основные элементы интерфейса:</strong>
 * </p>
 * <ol>
 *   <li>{@link #getInstance()} - метод, предназначенный для получения единственного экземпляра объекта типа T.</li>
 * </ol>
 *
 * <br/>
 * <p>
 * <strong>Философия и назначение:</strong>
 * </p>
 * Интерфейс ICommonSingletonFactoryStatic<T> основан на идее обеспечения контроля над созданием объектов
 * и обеспечения их уникальности в приложении. Этот подход полезен в ситуациях, где необходимо избежать
 * избыточного потребления ресурсов, связанного с созданием множества экземпляров объекта.
 *
 * <br/>
 * <p>
 * <strong>Паттерн "Одиночка":</strong>
 * </p>
 * Паттерн "Одиночка" обеспечивает управление жизненным циклом объекта и предотвращает создание дубликатов.
 * Это особенно важно в случаях, когда объект представляет глобальные ресурсы, такие как конфигурации,
 * соединения с базой данных или журналы.
 *
 *
 * <p>
 * <strong>Пример использования:</strong>
 * </p>
 * Пример использования интерфейса ICommonSingletonFactoryStatic<T>. Фабрика для создания и управления логгерами.
 * <pre>{@code
 * public class LoggerFactory implements ICommonSingletonFactoryStatic<Logger> {
 *     // Реализация методов интерфейса...
 * }
 * }</pre>
 */
public interface ICommonSingletonFactoryStatic<T> {

    /**
     * Получение единственного экземпляра объекта типа T.
     *
     * @return Единственный экземпляр объекта типа T.
     */
    T getInstance();
}
